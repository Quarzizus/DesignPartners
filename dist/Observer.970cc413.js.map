{"version":3,"sources":["patrones/Observer/index.ts"],"names":[],"mappings":"AASA,IAAA,OAAA;AAAA;AAAA,YAAA;AAGI,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAFA,SAAA,SAAA,GAAwB,EAAxB;AAGI,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;AACA,IAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AAC3B,MAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf;AACD,KAFD;AAGH;;AACD,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAA4B;AACxB,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACH,GAFD;;AAGA,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;AAC1B,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAA,GAAA,EAAG;AACtC,aAAO,GAAG,KAAK,QAAf;AACH,KAFa,CAAd;AAGA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACH,GALD;;AAMA,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAAxD;AACH,GAFD;;AAGJ,SAAA,OAAA;AArBA,CAAA,EAAA;;AAuBA,IAAA,OAAA;AAAA;AAAA,YAAA;AAEI,WAAA,OAAA,GAAA;AACI,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;AACH;;AACD,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACH,GAFD;;AAGJ,SAAA,OAAA;AARA,CAAA,EAAA;;AAUA,IAAM,KAAK,GAAG,IAAI,OAAJ,EAAd;AACA,IAAM,QAAQ,GAAG,IAAI,OAAJ,EAAjB;AAEA,KAAK,CAAC,SAAN,CAAgB,QAAhB,GACA","file":"Observer.970cc413.js","sourceRoot":"..","sourcesContent":["interface Observer {\n    update: (data: any) => void\n}\n\ninterface Subject {\n    subscribe: (observer: Observer) => void\n    unsubscribe: (obsever: Observer) => void\n}\n\nclass Bitcoin implements Subject {\n    observers: Observer[] = []\n\n    constructor(){\n        const el: HTMLInputElement = document.querySelector('#value')\n        el.addEventListener('input', () => {\n          this.notify(el.value);\n        });\n    }\n    subscribe(observer: Observer) {\n        this.observers.push(observer)\n    }\n    unsubscribe(observer: Observer) {\n        const index = this.observers.findIndex(obs => {\n            return obs === observer\n        })\n        this.observers.splice(index, 1)\n    }\n    notify(data: any){\n        this.observers.forEach(observer => observer.update(data))\n    }\n}\n\nclass display implements Observer {\n    private el: HTMLElement\n    constructor(){\n        this.el = document.querySelector('#price')\n    }\n    update(data: any) {\n        this.el.innerText = data\n    }\n}\n\nconst value = new Bitcoin()\nconst displayP = new display()\n\nvalue.subscribe(displayP)\n// setTimeout(() => value.unsubscribe(displayP),5000);"]}