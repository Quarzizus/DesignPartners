{"version":3,"sources":["patrones/Observer/index1.ts"],"names":[],"mappings":"AASE,IAAA,YAAA;AAAA;AAAA,YAAA;AAGE,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAFA,SAAA,SAAA,GAAwB,EAAxB;AAGE,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;AACA,IAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AAC3B,MAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf;AACD,KAFD;AAGD;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAA4B;AAC1B,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACD,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;AAC5B,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAA,GAAA,EAAG;AACxC,aAAO,GAAG,KAAK,QAAf;AACD,KAFa,CAAd;AAIA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACD,GAND;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACd,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAAxD;AACD,GAFD;;AAGF,SAAA,YAAA;AAzBA,CAAA,EAAA;;AA2BA,IAAA,YAAA;AAAA;AAAA,YAAA;AAGE,WAAA,YAAA,GAAA;AACE,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;AACD;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACd,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACD,GAFD;;AAGF,SAAA,YAAA;AAVA,CAAA,EAAA;;AAYA,IAAM,KAAK,GAAG,IAAI,YAAJ,EAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;AAEA,KAAK,CAAC,SAAN,CAAgB,OAAhB;AAEA,UAAU,CAAC,YAAA;AAAM,SAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAAA;AAA0B,CAAjC,EAAmC,IAAnC,CAAV","file":"index1.8ef27a35.js","sourceRoot":"..","sourcesContent":["interface Observer {\n    update: (data: any) => void;\n  }\n  \n  interface Subject {\n    subscribe: (observer: Observer) => void;\n    unsubscribe: (observer: Observer) => void;\n  }\n  \n  class BitcoinPrice implements Subject {\n    observers: Observer[] = [];\n  \n    constructor() {\n      const el: HTMLInputElement = document.querySelector('#value');\n      el.addEventListener('input', () => {\n        this.notify(el.value);\n      });\n    }\n  \n    subscribe(observer: Observer) {\n      this.observers.push(observer);\n    }\n  \n    unsubscribe(observer: Observer) {\n      const index = this.observers.findIndex(obs => {\n        return obs === observer;\n      });\n  \n      this.observers.splice(index, 1);\n    }\n  \n    notify(data: any) {\n      this.observers.forEach(observer => observer.update(data));\n    }\n  }\n  \n  class PriceDisplay implements Observer {\n    private el: HTMLElement;\n  \n    constructor() {\n      this.el = document.querySelector('#price');\n    }\n  \n    update(data: any) {\n      this.el.innerText = data;\n    }\n  }\n  \n  const value = new BitcoinPrice();\n  const display = new PriceDisplay();\n  \n  value.subscribe(display);\n  \n  setTimeout(() => value.unsubscribe(display), 5000);"]}